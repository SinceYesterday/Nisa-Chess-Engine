#ifndef SEARCH_H
#define SEARCH_H

#include "Board.h"
#include "MovesGenerator.h"
#include <climits>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <iomanip>
#include <queue>
#include <ctime>
#include <random>
#include <fstream>
#include <windows.h>
#include <algorithm>
#include <unistd.h>

class Search {
  public:
    int num_nodes;

    // perft test counters
    int num_nodes_quiescence;
    int num_leaf;
    int check;
    int check_mate;
    int num_captures;
    int num_enpassant;
    int num_castle;
    int num_promotion;
    int wrong_pv_move_count;
    int wrong_tt_move_count;

    MovesGenerator* moves_generator;

    // Generic PST
    // white position tables
    int position_table_white_knight[128] = {
            -50,-40,-30,-30,-30,-30,-40,-50,    0, 0, 0, 0, 0, 0, 0, 0,
            -40,-20,  0,  0,  0,  0,-20,-40,    0, 0, 0, 0, 0, 0, 0, 0,
            -30,  0, 10, 15, 15, 10,  0,-30,    0, 0, 0, 0, 0, 0, 0, 0,
            -30,  5, 15, 20, 20, 15,  5,-30,    0, 0, 0, 0, 0, 0, 0, 0,
            -30,  0, 15, 20, 20, 15,  0,-30,    0, 0, 0, 0, 0, 0, 0, 0,
            -30,  5, 10, 15, 15, 10,  5,-30,    0, 0, 0, 0, 0, 0, 0, 0,
            -40,-20,  0,  5,  5,  0,-20,-40,    0, 0, 0, 0, 0, 0, 0, 0,
            -50,-40,-30,-30,-30,-30,-40,-50,    0, 0, 0, 0, 0, 0, 0, 0
        };

    int position_table_white_bishop[128] = {
            -20,-10,-10,-10,-10,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0,
            -10,  0,  0,  0,  0,  0,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
            -10,  0,  5, 10, 10,  5,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
            -10,  5,  5, 10, 10,  5,  5,-10,    0, 0, 0, 0, 0, 0, 0, 0,
            -10,  0, 10, 10, 10, 10,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
            -10, 10, 10, 10, 10, 10, 10,-10,    0, 0, 0, 0, 0, 0, 0, 0,
            -10,  5,  0,  0,  0,  0,  5,-10,    0, 0, 0, 0, 0, 0, 0, 0,
            -20,-10,-10,-10,-10,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0
        };

    int position_table_white_rook[128] = {
        0,  0,  0,  0,  0,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0,
        5, 10, 10, 10, 10, 10, 10,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  0,  5,  5,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0
    };

    int position_table_white_queen[128] = {
        -20,-10,-10, -5, -5,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  0,  0,  0,  0,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  5,  5,  5,  5,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  5,  5,  5,  5,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  5,  5,  5,  5,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  5,  5,  5,  5,  5,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  5,  0,  0,  0,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -20,-10,-10, -5, -5,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0
        };

    int position_table_white_pawn[128] = {
        0,  0,  0,  0,  0,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0,
        50, 50, 50, 50, 50, 50, 50, 50,    0, 0, 0, 0, 0, 0, 0, 0,
        10, 10, 20, 30, 30, 20, 10, 10,    0, 0, 0, 0, 0, 0, 0, 0,
        5,  5, 10, 25, 25, 10,  5,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  0, 20, 20,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0,
        5, -5,-10,  0,  0,-10, -5,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        5, 10, 10,-20,-20, 10, 10,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  0,  0,  0,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0
    };

    int position_table_white_king[128] = { //
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -20,-30,-30,-40,-40,-30,-30,-20,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,-20,-20,-20,-20,-20,-20,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        20, 20,  0,  0,  0,  0, 20, 20,    0, 0, 0, 0, 0, 0, 0, 0,
        20, 30, 10,  0,  0, 10, 30, 20,    0, 0, 0, 0, 0, 0, 0, 0
        };


    // black position tables
    int position_table_black_knight[128] = {
        -50,-40,-30,-30,-30,-30,-40,-50,    0, 0, 0, 0, 0, 0, 0, 0,
        -40,-20,  0,  5,  5,  0,-20,-40,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,  5, 10, 15, 15, 10,  5,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,  0, 15, 20, 20, 15,  0,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,  5, 15, 20, 20, 15,  5,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,  0, 10, 15, 15, 10,  0,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -40,-20,  0,  0,  0,  0,-20,-40,    0, 0, 0, 0, 0, 0, 0, 0,
        -50,-40,-30,-30,-30,-30,-40,-50,    0, 0, 0, 0, 0, 0, 0, 0
        };

    int position_table_black_bishop[128] = {
        -20,-10,-10,-10,-10,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  5,  0,  0,  0,  0,  5,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10, 10, 10, 10, 10, 10, 10,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0, 10, 10, 10, 10,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  5,  5, 10, 10,  5,  5,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  5, 10, 10,  5,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  0,  0,  0,  0,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -20,-10,-10,-10,-10,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0,
        };

    int position_table_black_rook[128] = {
        0,  0,  0,  5,  5,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  0,  0,  0,  0,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        5, 10, 10, 10, 10, 10, 10,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  0,  0,  0,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0
    };

    int position_table_black_queen[128] = {
        -20,-10,-10, -5, -5,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  5,  0,  0,  0,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  5,  5,  5,  5,  5,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  5,  5,  5,  5,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -5,  0,  5,  5,  5,  5,  0, -5,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  5,  5,  5,  5,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,  0,  0,  0,  0,  0,  0,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -20,-10,-10, -5, -5,-10,-10,-20,    0, 0, 0, 0, 0, 0, 0, 0,
        };


    int position_table_black_pawn[128] = {
        0,  0,  0,  0,  0,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0,
        5, 10, 10,-20,-20, 10, 10,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        5, -5,-10,  0,  0,-10, -5,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  0, 20, 20,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0,
        5,  5, 10, 25, 25, 10,  5,  5,    0, 0, 0, 0, 0, 0, 0, 0,
        10, 10, 20, 30, 30, 20, 10, 10,    0, 0, 0, 0, 0, 0, 0, 0,
        50, 50, 50, 50, 50, 50, 50, 50,    0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,  0,  0,  0,  0,  0,  0,    0, 0, 0, 0, 0, 0, 0, 0
    };

    int position_table_black_king[128] = {
        20, 30, 10,  0,  0, 10, 30, 20,    0, 0, 0, 0, 0, 0, 0, 0,
        20, 20,  0,  0,  0,  0, 20, 20,    0, 0, 0, 0, 0, 0, 0, 0,
        -10,-20,-20,-20,-20,-20,-20,-10,    0, 0, 0, 0, 0, 0, 0, 0,
        -20,-30,-30,-40,-40,-30,-30,-20,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0,
        -30,-40,-40,-50,-50,-40,-40,-30,    0, 0, 0, 0, 0, 0, 0, 0
    };



    // Generic position table
    int position_table[128] = {
        2, 2, 2, 2, 2, 2, 2, 2,     0, 0, 0, 0, 0, 0, 0, 0,
        2, 4, 4, 4, 4, 4, 4, 2,     0, 0, 0, 0, 0, 0, 0, 0,
        2, 4, 6, 6, 6, 6, 4, 2,     0, 0, 0, 0, 0, 0, 0, 0,
        2, 4, 6, 8, 8, 6, 4, 2,     0, 0, 0, 0, 0, 0, 0, 0,
        2, 4, 6, 8, 8, 6, 4, 2,     0, 0, 0, 0, 0, 0, 0, 0,
        2, 4, 6, 6, 6, 6, 4, 2,     0, 0, 0, 0, 0, 0, 0, 0,
        2, 4, 4, 4, 4, 4, 4, 2,     0, 0, 0, 0, 0, 0, 0, 0,
        2, 2, 2, 2, 2, 2, 2, 2,     0, 0, 0, 0, 0, 0, 0, 0,
    };

    int position_table_king_safety[128] = {
        0,  0,   0,   0,   0,   0,  0,  0,     0, 0, 0, 0, 0, 0, 0, 0,
        0, 50,  50,  50,  50,  50, 50,  0,     0, 0, 0, 0, 0, 0, 0, 0,
        0, 50, 100, 100, 100, 100, 50,  0,     0, 0, 0, 0, 0, 0, 0, 0,
        0, 50, 100, 200, 200, 100, 50,  0,     0, 0, 0, 0, 0, 0, 0, 0,
        0, 50, 100, 200, 200, 100, 50,  0,     0, 0, 0, 0, 0, 0, 0, 0,
        0, 50, 100, 100, 100, 100, 50,  0,     0, 0, 0, 0, 0, 0, 0, 0,
        0, 50,  50,  50,  50,  50, 50,  0,     0, 0, 0, 0, 0, 0, 0, 0,
        0,  0,   0,   0,   0,   0,  0,  0,     0, 0, 0, 0, 0, 0, 0, 0,
    };


    /* ///////////////////////
                PESTO
    *///////////////////////*/

    // pawn mid game

    int mg_pawn_white[128] = {
          0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
         98, 134,  61,  95,  68, 126,  34, -11,   0,  0,  0,  0,  0,  0,  0,  0,
         -6,   7,  26,  31,  65,  56,  25, -20,   0,  0,  0,  0,  0,  0,  0,  0,
        -14,  13,   6,  21,  23,  12,  17, -23,   0,  0,  0,  0,  0,  0,  0,  0,
        -27,  -2,  -5,  12,  17,   6,  10, -25,   0,  0,  0,  0,  0,  0,  0,  0,
        -26,  -4,  -4, -10,   3,   3,  33, -12,   0,  0,  0,  0,  0,  0,  0,  0,
        -35,  -1, -20, -23, -15,  24,  38, -22,   0,  0,  0,  0,  0,  0,  0,  0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int mg_pawn_black[128] = {
             0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
        -35,  -1, -20, -23, -15,  24,  38, -22,   0,  0,  0,  0,  0,  0,  0,  0,
        -26,  -4,  -4, -10,   3,   3,  33, -12,   0,  0,  0,  0,  0,  0,  0,  0,
        -27,  -2,  -5,  12,  17,   6,  10, -25,   0,  0,  0,  0,  0,  0,  0,  0,
        -14,  13,   6,  21,  23,  12,  17, -23,   0,  0,  0,  0,  0,  0,  0,  0,
         -6,   7,  26,  31,  65,  56,  25, -20,   0,  0,  0,  0,  0,  0,  0,  0,
         98, 134,  61,  95,  68, 126,  34, -11,   0,  0,  0,  0,  0,  0,  0,  0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // pawn end game
    int eg_pawn_white[128] = {
          0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
        178, 173, 158, 134, 147, 132, 165, 187,   0,  0,  0,  0,  0,  0,  0,  0,
         94, 100,  85,  67,  56,  53,  82,  84,   0,  0,  0,  0,  0,  0,  0,  0,
         32,  24,  13,   5,  -2,   4,  17,  17,   0,  0,  0,  0,  0,  0,  0,  0,
         13,   9,  -3,  -7,  -7,  -8,   3,  -1,   0,  0,  0,  0,  0,  0,  0,  0,
          4,   7,  -6,   1,   0,  -5,  -1,  -8,   0,  0,  0,  0,  0,  0,  0,  0,
         13,   8,   8,  10,  13,   0,   2,  -7,   0,  0,  0,  0,  0,  0,  0,  0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int eg_pawn_black[128] = {
          0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
         13,   8,   8,  10,  13,   0,   2,  -7,   0,  0,  0,  0,  0,  0,  0,  0,
          4,   7,  -6,   1,   0,  -5,  -1,  -8,   0,  0,  0,  0,  0,  0,  0,  0,
         13,   9,  -3,  -7,  -7,  -8,   3,  -1,   0,  0,  0,  0,  0,  0,  0,  0,
         32,  24,  13,   5,  -2,   4,  17,  17,   0,  0,  0,  0,  0,  0,  0,  0,
         94, 100,  85,  67,  56,  53,  82,  84,   0,  0,  0,  0,  0,  0,  0,  0,
        178, 173, 158, 134, 147, 132, 165, 187,   0,  0,  0,  0,  0,  0,  0,  0,
          0,   0,   0,   0,   0,   0,   0,   0,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // knight mid game
    int mg_knight_white[128] = {
        -167, -89, -34, -49,  61, -97, -15,-107,   0,  0,  0,  0,  0,  0,  0,  0,
         -73, -41,  72,  36,  23,  62,   7, -17,   0,  0,  0,  0,  0,  0,  0,  0,
         -47,  60,  37,  65,  84, 129,  73,  44,   0,  0,  0,  0,  0,  0,  0,  0,
          -9,  17,  19,  53,  37,  69,  18,  22,   0,  0,  0,  0,  0,  0,  0,  0,
         -13,   4,  16,  13,  28,  19,  21,  -8,   0,  0,  0,  0,  0,  0,  0,  0,
         -23,  -9,  12,  10,  19,  17,  25, -16,   0,  0,  0,  0,  0,  0,  0,  0,
         -29, -53, -12,  -3,  -1,  18, -14, -19,   0,  0,  0,  0,  0,  0,  0,  0,
        -105, -21, -58, -33, -17, -28, -19, -23,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int mg_knight_black[128] = {
        -105, -21, -58, -33, -17, -28, -19, -23,   0,  0,  0,  0,  0,  0,  0,  0,
         -29, -53, -12,  -3,  -1,  18, -14, -19,   0,  0,  0,  0,  0,  0,  0,  0,
         -23,  -9,  12,  10,  19,  17,  25, -16,   0,  0,  0,  0,  0,  0,  0,  0,
         -13,   4,  16,  13,  28,  19,  21,  -8,   0,  0,  0,  0,  0,  0,  0,  0,
          -9,  17,  19,  53,  37,  69,  18,  22,   0,  0,  0,  0,  0,  0,  0,  0,
         -47,  60,  37,  65,  84, 129,  73,  44,   0,  0,  0,  0,  0,  0,  0,  0,
         -73, -41,  72,  36,  23,  62,   7, -17,   0,  0,  0,  0,  0,  0,  0,  0,
        -167, -89, -34, -49,  61, -97, -15,-107,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // knight end game
    int eg_knight_white[128] = {
        -58, -38, -13, -28, -31, -27, -63, -99,   0,  0,  0,  0,  0,  0,  0,  0,
        -25,  -8, -25,  -2,  -9, -25, -24, -52,   0,  0,  0,  0,  0,  0,  0,  0,
        -24, -20,  10,   9,  -1,  -9, -19, -41,   0,  0,  0,  0,  0,  0,  0,  0,
        -17,   3,  22,  22,  22,  11,   8, -18,   0,  0,  0,  0,  0,  0,  0,  0,
        -18,  -6,  16,  25,  16,  17,   4, -18,   0,  0,  0,  0,  0,  0,  0,  0,
        -23,  -3,  -1,  15,  10,  -3, -20, -22,   0,  0,  0,  0,  0,  0,  0,  0,
        -42, -20, -10,  -5,  -2, -20, -23, -44,   0,  0,  0,  0,  0,  0,  0,  0,
        -29, -51, -23, -15, -22, -18, -50, -64,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int eg_knight_black[128] = {
        -29, -51, -23, -15, -22, -18, -50, -64,   0,  0,  0,  0,  0,  0,  0,  0,
        -42, -20, -10,  -5,  -2, -20, -23, -44,   0,  0,  0,  0,  0,  0,  0,  0,
        -23,  -3,  -1,  15,  10,  -3, -20, -22,   0,  0,  0,  0,  0,  0,  0,  0,
        -18,  -6,  16,  25,  16,  17,   4, -18,   0,  0,  0,  0,  0,  0,  0,  0,
        -17,   3,  22,  22,  22,  11,   8, -18,   0,  0,  0,  0,  0,  0,  0,  0,
        -24, -20,  10,   9,  -1,  -9, -19, -41,   0,  0,  0,  0,  0,  0,  0,  0,
        -25,  -8, -25,  -2,  -9, -25, -24, -52,   0,  0,  0,  0,  0,  0,  0,  0,
        -58, -38, -13, -28, -31, -27, -63, -99,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // bishop mid game
    int mg_bishop_white[128] = {
        -29,   4, -82, -37, -25, -42,   7,  -8,   0,  0,  0,  0,  0,  0,  0,  0,
        -26,  16, -18, -13,  30,  59,  18, -47,   0,  0,  0,  0,  0,  0,  0,  0,
        -16,  37,  43,  40,  35,  50,  37,  -2,   0,  0,  0,  0,  0,  0,  0,  0,
         -4,   5,  19,  50,  37,  37,   7,  -2,   0,  0,  0,  0,  0,  0,  0,  0,
         -6,  13,  13,  26,  34,  12,  10,   4,   0,  0,  0,  0,  0,  0,  0,  0,
          0,  15,  15,  15,  14,  27,  18,  10,   0,  0,  0,  0,  0,  0,  0,  0,
          4,  15,  16,   0,   7,  21,  33,   1,   0,  0,  0,  0,  0,  0,  0,  0,
        -33,  -3, -14, -21, -13, -12, -39, -21,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int mg_bishop_black[128] = {
        -33,  -3, -14, -21, -13, -12, -39, -21,   0,  0,  0,  0,  0,  0,  0,  0,
          4,  15,  16,   0,   7,  21,  33,   1,   0,  0,  0,  0,  0,  0,  0,  0,
          0,  15,  15,  15,  14,  27,  18,  10,   0,  0,  0,  0,  0,  0,  0,  0,
         -6,  13,  13,  26,  34,  12,  10,   4,   0,  0,  0,  0,  0,  0,  0,  0,
         -4,   5,  19,  50,  37,  37,   7,  -2,   0,  0,  0,  0,  0,  0,  0,  0,
        -16,  37,  43,  40,  35,  50,  37,  -2,   0,  0,  0,  0,  0,  0,  0,  0,
        -26,  16, -18, -13,  30,  59,  18, -47,   0,  0,  0,  0,  0,  0,  0,  0,
        -29,   4, -82, -37, -25, -42,   7,  -8,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // bishop eng game
    int eg_bishop_white[128] = {
        -14, -21, -11,  -8,  -7,  -9, -17, -24,   0,  0,  0,  0,  0,  0,  0,  0,
         -8,  -4,   7, -12,  -3, -13,  -4, -14,   0,  0,  0,  0,  0,  0,  0,  0,
          2,  -8,   0,  -1,  -2,   6,   0,   4,   0,  0,  0,  0,  0,  0,  0,  0,
         -3,   9,  12,   9,  14,  10,   3,   2,   0,  0,  0,  0,  0,  0,  0,  0,
         -6,   3,  13,  19,   7,  10,  -3,  -9,   0,  0,  0,  0,  0,  0,  0,  0,
        -12,  -3,   8,  10,  13,   3,  -7, -15,   0,  0,  0,  0,  0,  0,  0,  0,
        -14, -18,  -7,  -1,   4,  -9, -15, -27,   0,  0,  0,  0,  0,  0,  0,  0,
        -23,  -9, -23,  -5,  -9, -16,  -5, -17,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int eg_bishop_black[128] = {
        -23,  -9, -23,  -5,  -9, -16,  -5, -17,   0,  0,  0,  0,  0,  0,  0,  0,
        -14, -18,  -7,  -1,   4,  -9, -15, -27,   0,  0,  0,  0,  0,  0,  0,  0,
        -12,  -3,   8,  10,  13,   3,  -7, -15,   0,  0,  0,  0,  0,  0,  0,  0,
         -6,   3,  13,  19,   7,  10,  -3,  -9,   0,  0,  0,  0,  0,  0,  0,  0,
         -3,   9,  12,   9,  14,  10,   3,   2,   0,  0,  0,  0,  0,  0,  0,  0,
          2,  -8,   0,  -1,  -2,   6,   0,   4,   0,  0,  0,  0,  0,  0,  0,  0,
         -8,  -4,   7, -12,  -3, -13,  -4, -14,   0,  0,  0,  0,  0,  0,  0,  0,
        -14, -21, -11,  -8,  -7,  -9, -17, -24,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // rook mid game
    int mg_rook_white[128] = {
         32,  42,  32,  51,  63,   9,  31,  43,   0,  0,  0,  0,  0,  0,  0,  0,
          27,  32,  58,  62,  80,  67,  26,  44,   0,  0,  0,  0,  0,  0,  0,  0,
         -5,  19,  26,  36,  17,  45,  61,  16,   0,  0,  0,  0,  0,  0,  0,  0,
        -24, -11,   7,  26,  24,  35,  -8, -20,   0,  0,  0,  0,  0,  0,  0,  0,
        -36, -26, -12,  -1,   9,  -7,   6, -23,   0,  0,  0,  0,  0,  0,  0,  0,
        -45, -25, -16, -17,   3,   0,  -5, -33,   0,  0,  0,  0,  0,  0,  0,  0,
        -44, -16, -20,  -9,  -1,  11,  -6, -71,   0,  0,  0,  0,  0,  0,  0,  0,
        -19, -13,   1,  17,  16,   7, -37, -26,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int mg_rook_black[128] = {
        -19, -13,   1,  17,  16,   7, -37, -26,   0,  0,  0,  0,  0,  0,  0,  0,
        -44, -16, -20,  -9,  -1,  11,  -6, -71,   0,  0,  0,  0,  0,  0,  0,  0,
        -45, -25, -16, -17,   3,   0,  -5, -33,   0,  0,  0,  0,  0,  0,  0,  0,
        -36, -26, -12,  -1,   9,  -7,   6, -23,   0,  0,  0,  0,  0,  0,  0,  0,
        -24, -11,   7,  26,  24,  35,  -8, -20,   0,  0,  0,  0,  0,  0,  0,  0,
         -5,  19,  26,  36,  17,  45,  61,  16,   0,  0,  0,  0,  0,  0,  0,  0,
         27,  32,  58,  62,  80,  67,  26,  44,   0,  0,  0,  0,  0,  0,  0,  0,
         32,  42,  32,  51,  63,   9,  31,  43,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // rook end game
    int eg_rook_white[128] = {
        13,  10,  18,  15,  12,  12,   8,   5,   0,  0,  0,  0,  0,  0,  0,  0,
        11,  13,  13,  11,  -3,   3,   8,   3,   0,  0,  0,  0,  0,  0,  0,  0,
         7,   7,   7,   5,   4,  -3,  -5,  -3,   0,  0,  0,  0,  0,  0,  0,  0,
         4,   3,  13,   1,   2,   1,  -1,   2,   0,  0,  0,  0,  0,  0,  0,  0,
          3,   5,   8,   4,  -5,  -6,  -8, -11,   0,  0,  0,  0,  0,  0,  0,  0,
        -4,   0,  -5,  -1,  -7, -12,  -8, -16,   0,  0,  0,  0,  0,  0,  0,  0,
        -6,  -6,   0,   2,  -9,  -9, -11,  -3,   0,  0,  0,  0,  0,  0,  0,  0,
        -9,   2,   3,  -1,  -5, -13,   4, -20,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int eg_rook_black[128] = {
        -9,   2,   3,  -1,  -5, -13,   4, -20,   0,  0,  0,  0,  0,  0,  0,  0,
        -6,  -6,   0,   2,  -9,  -9, -11,  -3,   0,  0,  0,  0,  0,  0,  0,  0,
        -4,   0,  -5,  -1,  -7, -12,  -8, -16,   0,  0,  0,  0,  0,  0,  0,  0,
         3,   5,   8,   4,  -5,  -6,  -8, -11,   0,  0,  0,  0,  0,  0,  0,  0,
         4,   3,  13,   1,   2,   1,  -1,   2,   0,  0,  0,  0,  0,  0,  0,  0,
         7,   7,   7,   5,   4,  -3,  -5,  -3,   0,  0,  0,  0,  0,  0,  0,  0,
        11,  13,  13,  11,  -3,   3,   8,   3,   0,  0,  0,  0,  0,  0,  0,  0,
        13,  10,  18,  15,  12,  12,   8,   5,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // queen mid game
    int mg_queen_white[128] = {
        -28,   0,  29,  12,  59,  44,  43,  45,   0,  0,  0,  0,  0,  0,  0,  0,
        -24, -39,  -5,   1, -16,  57,  28,  54,   0,  0,  0,  0,  0,  0,  0,  0,
        -13, -17,   7,   8,  29,  56,  47,  57,   0,  0,  0,  0,  0,  0,  0,  0,
        -27, -27, -16, -16,  -1,  17,  -2,   1,   0,  0,  0,  0,  0,  0,  0,  0,
         -9, -26,  -9, -10,  -2,  -4,   3,  -3,   0,  0,  0,  0,  0,  0,  0,  0,
        -14,   2, -11,  -2,  -5,   2,  14,   5,   0,  0,  0,  0,  0,  0,  0,  0,
        -35,  -8,  11,   2,   8,  15,  -3,   1,   0,  0,  0,  0,  0,  0,  0,  0,
         -1, -18,  -9,  10, -15, -25, -31, -50,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int mg_queen_black[128] = {
         -1, -18,  -9,  10, -15, -25, -31, -50,   0,  0,  0,  0,  0,  0,  0,  0,
        -35,  -8,  11,   2,   8,  15,  -3,   1,   0,  0,  0,  0,  0,  0,  0,  0,
        -14,   2, -11,  -2,  -5,   2,  14,   5,   0,  0,  0,  0,  0,  0,  0,  0,
         -9, -26,  -9, -10,  -2,  -4,   3,  -3,   0,  0,  0,  0,  0,  0,  0,  0,
        -27, -27, -16, -16,  -1,  17,  -2,   1,   0,  0,  0,  0,  0,  0,  0,  0,
        -13, -17,   7,   8,  29,  56,  47,  57,   0,  0,  0,  0,  0,  0,  0,  0,
        -24, -39,  -5,   1, -16,  57,  28,  54,   0,  0,  0,  0,  0,  0,  0,  0,
        -28,   0,  29,  12,  59,  44,  43,  45,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // queen end game
    int eg_queen_white[128] = {
         -9,  22,  22,  27,  27,  19,  10,  20,   0,  0,  0,  0,  0,  0,  0,  0,
        -17,  20,  32,  41,  58,  25,  30,   0,   0,  0,  0,  0,  0,  0,  0,  0,
        -20,   6,   9,  49,  47,  35,  19,   9,   0,  0,  0,  0,  0,  0,  0,  0,
          3,  22,  24,  45,  57,  40,  57,  36,   0,  0,  0,  0,  0,  0,  0,  0,
        -18,  28,  19,  47,  31,  34,  39,  23,   0,  0,  0,  0,  0,  0,  0,  0,
        -16, -27,  15,   6,   9,  17,  10,   5,   0,  0,  0,  0,  0,  0,  0,  0,
        -22, -23, -30, -16, -16, -23, -36, -32,   0,  0,  0,  0,  0,  0,  0,  0,
        -33, -28, -22, -43,  -5, -32, -20, -41,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int eg_queen_black[128] = {
        -33, -28, -22, -43,  -5, -32, -20, -41,   0,  0,  0,  0,  0,  0,  0,  0,
        -22, -23, -30, -16, -16, -23, -36, -32,   0,  0,  0,  0,  0,  0,  0,  0,
        -16, -27,  15,   6,   9,  17,  10,   5,   0,  0,  0,  0,  0,  0,  0,  0,
        -18,  28,  19,  47,  31,  34,  39,  23,   0,  0,  0,  0,  0,  0,  0,  0,
          3,  22,  24,  45,  57,  40,  57,  36,   0,  0,  0,  0,  0,  0,  0,  0,
        -20,   6,   9,  49,  47,  35,  19,   9,   0,  0,  0,  0,  0,  0,  0,  0,
        -17,  20,  32,  41,  58,  25,  30,   0,   0,  0,  0,  0,  0,  0,  0,  0,
         -9,  22,  22,  27,  27,  19,  10,  20,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // king mid game
    int mg_king_white[128] = {
        -65,  23,  16, -15, -56, -34,   2,  13,   0,  0,  0,  0,  0,  0,  0,  0,
         29,  -1, -20,  -7,  -8,  -4, -38, -29,   0,  0,  0,  0,  0,  0,  0,  0,
         -9,  24,   2, -16, -20,   6,  22, -22,   0,  0,  0,  0,  0,  0,  0,  0,
        -17, -20, -12, -27, -30, -25, -14, -36,   0,  0,  0,  0,  0,  0,  0,  0,
        -49,  -1, -27, -39, -46, -44, -33, -51,   0,  0,  0,  0,  0,  0,  0,  0,
        -14, -14, -22, -46, -44, -30, -15, -27,   0,  0,  0,  0,  0,  0,  0,  0,
          1,   7,  -8, -64, -43, -16,   9,   8,   0,  0,  0,  0,  0,  0,  0,  0,
        -15,  36,  12, -54,   8, -28,  24,  14,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int mg_king_black[128] = {
        -15,  36,  12, -54,   8, -28,  24,  14,   0,  0,  0,  0,  0,  0,  0,  0,
          1,   7,  -8, -64, -43, -16,   9,   8,   0,  0,  0,  0,  0,  0,  0,  0,
        -14, -14, -22, -46, -44, -30, -15, -27,   0,  0,  0,  0,  0,  0,  0,  0,
        -49,  -1, -27, -39, -46, -44, -33, -51,   0,  0,  0,  0,  0,  0,  0,  0,
        -17, -20, -12, -27, -30, -25, -14, -36,   0,  0,  0,  0,  0,  0,  0,  0,
         -9,  24,   2, -16, -20,   6,  22, -22,   0,  0,  0,  0,  0,  0,  0,  0,
         29,  -1, -20,  -7,  -8,  -4, -38, -29,   0,  0,  0,  0,  0,  0,  0,  0,
        -65,  23,  16, -15, -56, -34,   2,  13,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // king end game
    int eg_king_white[128] = {
        -74, -35, -18, -18, -11,  15,   4, -17,   0,  0,  0,  0,  0,  0,  0,  0,
        -12,  17,  14,  17,  17,  38,  23,  11,   0,  0,  0,  0,  0,  0,  0,  0,
         10,  17,  23,  15,  20,  45,  44,  13,   0,  0,  0,  0,  0,  0,  0,  0,
         -8,  22,  24,  27,  26,  33,  26,   3,   0,  0,  0,  0,  0,  0,  0,  0,
        -18,  -4,  21,  24,  27,  23,   9, -11,   0,  0,  0,  0,  0,  0,  0,  0,
        -19,  -3,  11,  21,  23,  16,   7,  -9,   0,  0,  0,  0,  0,  0,  0,  0,
        -27, -11,   4,  13,  14,   4,  -5, -17,   0,  0,  0,  0,  0,  0,  0,  0,
        -53, -34, -21, -11, -28, -14, -24, -43,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int eg_king_black[128] = {
        -53, -34, -21, -11, -28, -14, -24, -43,   0,  0,  0,  0,  0,  0,  0,  0,
        -27, -11,   4,  13,  14,   4,  -5, -17,   0,  0,  0,  0,  0,  0,  0,  0,
        -19,  -3,  11,  21,  23,  16,   7,  -9,   0,  0,  0,  0,  0,  0,  0,  0,
        -18,  -4,  21,  24,  27,  23,   9, -11,   0,  0,  0,  0,  0,  0,  0,  0,
         -8,  22,  24,  27,  26,  33,  26,   3,   0,  0,  0,  0,  0,  0,  0,  0,
         10,  17,  23,  15,  20,  45,  44,  13,   0,  0,  0,  0,  0,  0,  0,  0,
        -12,  17,  14,  17,  17,  38,  23,  11,   0,  0,  0,  0,  0,  0,  0,  0,
        -74, -35, -18, -18, -11,  15,   4, -17,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    int null_board[128] = {
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,   0,  0,  0,  0,  0,  0,  0,  0,
    };

    // PESTO for move ordering only
    // currently Nisa uses history heuristic for quiet moves
    int mo_king_white[128];
    int mo_queen_white[128];
    int mo_rook_white[128];
    int mo_knight_white[128];
    int mo_bishop_white[128];
    int mo_pawn_white[128];

    int mo_king_black[128];
    int mo_queen_black[128];
    int mo_rook_black[128];
    int mo_knight_black[128];
    int mo_bishop_black[128];
    int mo_pawn_black[128];

    // for 0x88 move generation
    struct Moves_direction {
        int vertical[4] = {1, 16, -1, -16};
        int diagonal[4] = {15, 17, -15, -17};
        int knight[8] = {33, 31, 14, 18, -33, -31, -14, -18};
        int king[8] = {1, 16, -1, -16, 15, 17, -15, -17};
    } dir;

    // Reduction table
    int reduction_table[24];

    // pawn structure evaluation
    int pawn_struct[128][128];

    // null move flag
    bool can_null;

    // pst incremental evaluation
    int* mg_pst_inc[512];
    int* eg_pst_inc[512];
    int mg_eval[2];
    int eg_eval[2];
    int game_phase;

    // for promotions
    int promotion_offset[5000];

    int game_phase_inc[901];

    //pv queue
    std::queue<std::pair<int, int>> pv_queue;

    //for counting stats stuff
    int count1;
    int count2;
    int count3;

    // side to move
    int side;

    int white_mat_score;
    int black_mat_score;

    int alpha_beta_cuts;
    long long branch[128];

    // history heuristic
    int history[2][128][128];

    int flag_capture = 0;
    int flag_enpassant = 0;
    int flag_castle = 0;
    int flag_promotion = 0;
    int pos_capture = 127;

    // time management
    int start_time;
    int time_limit;
    bool time_over;

    int moves_played_sofar;

    int cur_depth;
    int perft_depth;
    int max_depth_rearched;
    int depth_reduction;
    //real depth for now
    int real_depth = 7; //###########

    bool stats_mode = false;

    //depth used in ID
    int MAX_DEPTH = 100;

    // variables that saves position of every pieces
    // used principally for move generation
    Board::Pieces_position search_wpieces;
    Board::Pieces_position search_bpieces;

    // piece count in current position
    int white_queen_count;
    int white_rook_count;
    int white_bishop_count;
    int white_knight_count;
    int white_pawn_count;

    int black_queen_count;
    int black_rook_count;
    int black_bishop_count;
    int black_knight_count;
    int black_pawn_count;

    unsigned long long zobrist_key = 0;
    unsigned long long zobrist_table_state = 0;
    unsigned long long zobrist_black_moved;
    unsigned long long zobrist_white_moved;
    unsigned long long zobrist_depth[10];

    unsigned long long zobrist_id[2][8889][128];
    unsigned long long zobrist_castle[4];
    unsigned long long zobrist_enpassant[128];

    //depth 4+
    //#define zobrist_tt_size 4000

    //depth 6+
    //#define zobrist_tt_size 40000

    //depth 8+
    //#define zobrist_tt_size 400000
    #define zobrist_tt_size 400000

    //depth 10+
    //#define zobrist_tt_size 4000000

    //depth 12+
    //define zobrist_tt_size 16000000

    //#define zobrist_tt_size 0x90000

    struct hash_data {
        unsigned long long zobrist_key;
        int score;
        short depth;
        short best_from;
        short best_to;
        short flags;
        std::vector<std::pair<int, int>> line;
    };
    long long hashf;

    struct hash_data_repetition {
        unsigned long long zobrist_key;
        int num_move;
        int depth;
    };
    int repetition_tt_colitions;
    int repetitions_count;

    int TT_move_best_from;
    int TT_move_best_to;
    int TT_move_recovered;
    int TT_move_cuts;

    bool flag_tt_move;

    int num_positions_generated = 0;
    int first_cut_alpha_beta;

    // main transposition table
    hash_data zobrist_tt[zobrist_tt_size];
    // transposition tables for best_move and move ordering
    hash_data zobrist_tt_2nd[zobrist_tt_size];
    hash_data zobrist_tt_3nd[zobrist_tt_size];

    // repetition table
    unsigned long long repetition_table[1024];
    int repetition_index;

    std::unordered_map<unsigned long long, int> zobrist_tt_wrong;
    std::unordered_map<long long, long long> test;

    int zobrist_key_saved = 0;
    int zobrist_key_duplicated = 0;
    int bad_keys = 0;
    int recycled_keys = 0;
    int has_to_research = 0;
    int num_moves_sum = 0;
    int extra_evaluation = 0;

    unsigned int random_state = 1804289383;

    // 0x88 board representation
    int board[128];
    // dboard saves pointers to pieces, so we can delete them and recover faster
    int* dboard[128];
    std::string FEN;

    // best move of current search
    int best_from = -1;
    int best_to = -1;

    Search();
    virtual ~Search();

    void init();

    // setup search variables and start iterative deeping
    void start_search(int*, Board::Pieces_position*, Board::Pieces_position*);

    // minimax/negamax search
    int minimax(int, int, int, int, std::vector<std::pair<int, int>>&);

    // this function is still minimax(should be inside minimax)
    int calculate(int, int*, int*, int, int, int&, int&, int, bool, std::vector<std::pair<int, int>>&);

    // call to start the search
    int evaluate(int);

    void calculate_black(int*, int*, int&, int&, int);

    // make-undo move inside search
    int setup_move(int, int, int, int, int, int, std::vector<std::pair<int, int>>&);

    // generate key of current position
    void start_zobrist();
    void update_zobrist();

    char weight_to_char(int);
    void generate_FEN();

    // generate key for testing purposes
    unsigned long long generate_zobrist_key(int, int);
    void set_board_e(std::string);

    // show board-dboard
    void print_board();
    void print_dboard();

    // order captures with MVV-LVA
    void ordering_captures(int*, int*, int, int);

    // order quiet moves with historic heuristic
    void ordering_moves(int*, int*, int, int);

    // quiescense search
    int quiescence(int, int, int, int);
    int quiescence_setup_move(int, int, int, int, int, int);

    // incremental evaluation
    inline void mg_incremental_evaluation(int*, int, int, int);

    // incremental zobrist
    inline void incremental_zobrist(int*, int, int, int);

    // move ordering tables
    void populate_move_ordering_tables();

    // to print pv move
    std::string show_pv_move(int, int, int);

    // move gives check?
    bool move_gives_check(int*, int, int, int);

    // check if there is a repetition
    bool repetition_found();

    // generate all moves
    int generate_moves(int*, int*, int*, int&, int*, int*, int&, int);

    // generate only attacks, its a bit faster
    // it generates all moves but saves captures only
    int generate_attacks(int*, int*, int*, int&, int);

    // set castle rights during search
    void evaluate_castle_rights(int* board, int shift, int from);

    // make-undo move during search
    inline void make_move(int*, int, int, int*&, int&, int&, int*&, int);
    inline void unmake_move(int*, int, int, int*&, int&, int&, int*&, int);

    // promote-unpromote move during search
    void promote_piece(int*, int, int, int);
    void unpromote_piece(int*, int, int, int);

  protected:

  private:
};

#endif // SEARCH_H
